#!/usr/bin/env node

const core = require('@actions/core');
const exec = require('@actions/exec');
const github = require('@actions/github');
const addr = require('email-addresses');

const spawn = (exe, args, cwd) => {
    return new Promise((resolve, reject) => {
        const buffer = [];
        exec.exec(exe, args, {
            cwd: cwd || process.cwd(),
            listeners: {
                stderr: (chunk) => {
                    buffer.push(chunk.toString());
                },
                stdout: (chunk) => {
                    buffer.push(chunk.toString());
                },
            }
        }).then(code => {
            const output = buffer.join('');
            if (code) {
                const msg = output || 'Process failed: ' + code;
                reject(new ProcessError(code, msg));
            } else {
                resolve(output);
            }
        })
    });
}

function gitDeploy(options) {
    spawn('rm', ['-rf', `!(${options.dist})`]).then((rm) => {
        core.info(`---------- remove all not path ${options.dist} successful -----------`);
        core.info(rm)
        spawn('git', ['restore', '--staged', '.gitignore', '.github/*']).then(() => {
            core.info(`---------- git restore successful -----------`);
            spawn('git', ['checkout', '--', '.gitignore', '.github/*']).then(() => {
                core.info(`---------- git checkout file successful -----------`);
                spawn('cp', ['-r', `${options.dist}/.`, './']).then(() => {
                    core.info(`---------- copy file to base path successful -----------`);
                    spawn('rm', ['-r', `${options.dist}`]).then((rm) => {
                        core.info(`---------- remove path ${options.dist} successful -----------`);
                        core.info(rm)
                        spawn('git', ['status', '--porcelain']).then((status) => {
                            core.info(`---------- git status list -----------`);
                            core.info(status)
                            if (!output) {
                                core.info(`Nothing to deploy`);
                            } else {
                                spawn('git', ['add', '.']).then((addAll) => {
                                    core.info(`---------- git add successful -----------`);
                                    core.info(addAll)
                                    spawn('git', ['commit', '-m', options.message ? options.message : `Deploying ${options.branch} from ${options.originBranch}`]).then(() => {
                                        core.info(`---------- git commit successful -----------`);
                                        spawn('git', ['push', `${options.remote}`, `${options.branch}`]).then(() => {
                                            core.info(`---------- deploy successful -----------`);
                                        })

                                    })

                                })

                            }
                        })
                    })

                })

            })

        })

    })

}


function main() {
    const defaults = {
        branch: 'gh-pages',
        remote: 'origin'
    };

    const options = {
        github_token: core.getInput('github_token') || process.env.GITHUB_TOKEN,
        dist: core.getInput('dist'),
        branch: core.getInput('branch') || defaults.branch,
        message: core.getInput('message'),
        repo: core.getInput('repo'),
        remote: core.getInput('remote') || defaults.remote,
        user: core.getInput('user'),
    }


    let user;
    if (options.user) {
        const parts = addr.parseOneAddress(options.user);
        if (!parts) {
            throw new Error(
                `Could not parse name and email from user option '${options.user}' ` +
                '(format should be "Your Name <email@example.com>")'
            );
        }
        user = { name: parts.name, email: parts.address };
    }



    const config = {
        github_token: options.github_token,
        dist: options.dist,
        repo: options.repo,
        branch: options.branch,
        message: options.message,
        remote: options.remote,
        user: user ? user : {
            name: `${github.context.repo.owner}`,
            email: `${github.context.repo.owner}@users.noreply.github.com`
        },
    };

    const newOptions = Object.assign({}, defaults, config);
    const repo = newOptions.repo ? newOptions.repo : `https://git:${newOptions.github_token}@github.com/${github.context.repo.owner}/${github.context.repo.repo}.git`
    spawn('git', ['config', '--global', 'user.name', newOptions.user.name]).then(() => {
        spawn('git', ['config', '--global', 'user.email', newOptions.user.email]).then(() => {
            spawn('git', ['remote', 'set-url', newOptions.remote, repo]).then(() => {

                spawn('git', ['config', 'user.name']).then(output => {
                    core.info(`---------- git config username successful -----------`);
                    core.info(`name: ${output}`);
                })

                spawn('git', ['config', 'user.email']).then(output => {
                    core.info(`---------- git config email successful -----------`);
                    core.info(`email: ${output}`);
                })

                spawn('git', ['config', '--get', 'remote.' + newOptions.remote + '.url']).then(output => {
                    core.info(`---------- git set url repo successful -----------`);
                    const repo = output && output.split(/[\n\r]/).shift();
                    core.info(`url-repo: ${repo}`);

                    spawn('git', ['rev-parse', '--abbrev-ref', 'HEAD']).then(originBranch => {
                        core.info(`---------- check base branch -----------`);
                        core.info(`on branch: ${originBranch}`);
                        newOptions.originBranch = originBranch
                        spawn('git', ['ls-remote', '--heads', `${newOptions.remote}`, `${newOptions.branch}`]).then((branch) => {
                            core.info(`---------- check to branch -----------`);
                            core.info(`on branch: ${branch}`);
                            spawn('git', ['stash']).then((branch) => {})
                            if (branch.trim().includes(newOptions.branch)) {
                                core.info(`---------- update branch -----------`);
                                spawn('git', ['switch', `${newOptions.branch}`]).then((branch) => {
                                    core.info(`---------- git switch to branch successful -----------`);
                                    spawn('ls').then((list) => {
                                        core.info(list)
                                        if (list.trim().includes(newOptions.dist)) {
                                            gitDeploy(newOptions)
                                        } else {
                                            spawn('npm', ['install']).then(() => {
                                                core.info(`---------- npm install successful -----------`);
                                                spawn('npm', ['run', 'build']).then(() => {
                                                    core.info(`---------- npm run build successful -----------`);
                                                    gitDeploy(newOptions)
                                                })
                                            })
                                        }
                                    })
                                })
                            } else {
                                core.info(`---------- new branch -----------`);
                                spawn('git', ['switch', '--orphan', `${newOptions.branch}`]).then((branch) => {
                                    core.info(`---------- git switch to branch successful -----------`);
                                    spawn('ls').then((list) => {
                                        core.info(list)
                                        if (list.trim().includes(newOptions.dist)) {
                                            gitDeploy(newOptions)
                                        } else {
                                            spawn('npm', ['install']).then(() => {
                                                core.info(`---------- npm install successful -----------`);
                                                spawn('npm', ['run', 'build']).then(() => {
                                                    core.info(`---------- npm run build successful -----------`);
                                                    gitDeploy(newOptions)
                                                })
                                            })
                                        }
                                    })
                                })
                            }

                        })

                    })
                })
            })
        })
    })

}

main()

